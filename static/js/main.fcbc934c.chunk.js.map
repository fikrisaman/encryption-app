{"version":3,"sources":["components/Introduction.module.css","containers/Form/Form.module.css","containers/Result/Result.module.css","App.module.css","components/Introduction.js","store/actions.js","containers/Form/Form.js","containers/Result/Result.js","App.js","reportWebVitals.js","store/reducers.js","index.js"],"names":["module","exports","Introduction","className","classes","ENCRYPT_TEXT","STORE_RANDOM_KEY","STRING_NOT_VALID","NO_MORE_NUMBER","VOWELS","ALPHABETS","Form","state","text","value","randKey","encText","valid","generateKey","genKey","Math","floor","random","props","keyArr","includes","length","convertAlphabet","char","newIndex","index","vowel","consonent","isVowel","isUppercase","toLowerCase","encryptHandler","keyStr","toString","split","parseInt","uppercase","map","c","indexOf","toUpperCase","test","join","checkValidity","inputChangedHandler","event","updatedText","target","setState","submitHandler","preventDefault","updateState","onNoMoreNumber","storeRandomKey","onEncryptText","onStringNotValid","error","this","showError","noMoreNumber","onSubmit","type","placeholder","onChange","disabled","Component","connect","dispatch","originalText","encryptedText","actions","oriText","Result","showResult","isValid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","actionTypes","concat","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcbc934c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Introduction\":\"Introduction_Introduction__2ChYf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__pxJHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__1G9F4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1gHuL\"};","import React from \"react\";\r\n\r\n// Importing style\r\nimport classes from \"./Introduction.module.css\";\r\n\r\nconst Introduction = () => {\r\n  return (\r\n    <div className={classes.Introduction}>\r\n      <header>Simple encryption app</header>\r\n      <p>This app encrypts string/text based on a random generated key</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Introduction;\r\n","export const ENCRYPT_TEXT = \"ENCRYPT_TEXT\";\r\nexport const STORE_RANDOM_KEY = \"STORE_RANDOM_KEY\";\r\nexport const STRING_NOT_VALID = \"STRING_NOT_VALID\";\r\nexport const NO_MORE_NUMBER = \"NO_MORE_NUMBER\";\r\n","import React, { Component } from \"react\";\r\n\r\n// Importing style\r\nimport classes from \"./Form.module.css\";\r\n\r\n// Import redux\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nconst MIN = 11;\r\nconst MAX = 99;\r\nconst VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"];\r\nconst ALPHABETS = [\r\n  \"A\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"I\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \"M\",\r\n  \"N\",\r\n  \"O\",\r\n  \"P\",\r\n  \"Q\",\r\n  \"R\",\r\n  \"S\",\r\n  \"T\",\r\n  \"U\",\r\n  \"V\",\r\n  \"W\",\r\n  \"X\",\r\n  \"Y\",\r\n  \"Z\",\r\n];\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    text: {\r\n      value: \"\",\r\n      randKey: null,\r\n      encText: \"\",\r\n      valid: false,\r\n    },\r\n  };\r\n\r\n  // Generate a 2 digits number between 11-99 and check if it is already exist at the main store, if yes, recursively generate the number, if not, return the number\r\n  generateKey = () => {\r\n    let genKey = Math.floor(Math.random() * (MAX - MIN + 1) + MIN);\r\n\r\n    if (!this.props.keyArr.includes(genKey)) {\r\n      return genKey;\r\n    } else {\r\n      if (this.props.keyArr.length < 89) {\r\n        // Recursively generate number\r\n        genKey = this.generateKey();\r\n        return genKey;\r\n      } else {\r\n        // No more number available\r\n        return -1;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Convert the alphabet based on the random generated number\r\n  // Check if it's a vowel or a consonent\r\n  // Check if it's an uppercase or lowercase\r\n  convertAlphabet = (\r\n    char,\r\n    newIndex,\r\n    index,\r\n    vowel,\r\n    consonent,\r\n    isVowel,\r\n    isUppercase\r\n  ) => {\r\n    newIndex = index + (isVowel ? vowel : consonent);\r\n    if (newIndex > ALPHABETS.length) {\r\n      // if the newIndex exceeds the number of alphabets, restart from index 0\r\n      newIndex = newIndex - ALPHABETS.length;\r\n\r\n      return (char = isUppercase\r\n        ? ALPHABETS[newIndex]\r\n        : ALPHABETS[newIndex].toLowerCase());\r\n    } else if (newIndex === ALPHABETS.length) {\r\n      // if newIndex is the last alphabet (z)\r\n      newIndex = newIndex - 1;\r\n\r\n      return (char = isUppercase\r\n        ? ALPHABETS[newIndex]\r\n        : ALPHABETS[newIndex].toLowerCase());\r\n    }\r\n\r\n    // When newIndex does not exceeds the alphabet array\r\n    return (char = isUppercase\r\n      ? ALPHABETS[newIndex]\r\n      : ALPHABETS[newIndex].toLowerCase());\r\n  };\r\n\r\n  // Takes in user input text and the random generated number\r\n  encryptHandler = (text, randKey) => {\r\n    // Split the number into an array\r\n    const keyStr = randKey.toString().split(\"\");\r\n\r\n    // Vowel takes in the first digit, consonent the second\r\n    const vowel = parseInt(keyStr[0]);\r\n    const consonent = parseInt(keyStr[1]);\r\n\r\n    // const vowel = 2; // for testing\r\n    // const consonent = 6; // for testing\r\n    // console.log(vowel, consonent);\r\n\r\n    const uppercase = /[A-Z]/;\r\n\r\n    const encryptedText = [...text].map((c) => {\r\n      // Find the index of the current character\r\n      let index = ALPHABETS.indexOf(c.toUpperCase());\r\n\r\n      let newIndex = 0;\r\n\r\n      // check if uppercase/lowercase\r\n      if (uppercase.test(c)) {\r\n        // Check of the current character is a vowel or not\r\n        if (VOWELS.includes(c.toLowerCase())) {\r\n          return (c = this.convertAlphabet(\r\n            c,\r\n            newIndex,\r\n            index,\r\n            vowel,\r\n            consonent,\r\n            true,\r\n            true\r\n          ));\r\n        } else {\r\n          return (c = this.convertAlphabet(\r\n            c,\r\n            newIndex,\r\n            index,\r\n            vowel,\r\n            consonent,\r\n            false,\r\n            true\r\n          ));\r\n        }\r\n      } else if (c === \" \") {\r\n        // If current character is space, do nothing\r\n        return c;\r\n      } else {\r\n        // When current character is lowercase\r\n        if (VOWELS.includes(c)) {\r\n          return (c = this.convertAlphabet(\r\n            c,\r\n            newIndex,\r\n            index,\r\n            vowel,\r\n            consonent,\r\n            true,\r\n            false\r\n          ));\r\n        } else {\r\n          return (c = this.convertAlphabet(\r\n            c,\r\n            newIndex,\r\n            index,\r\n            vowel,\r\n            consonent,\r\n            false,\r\n            false\r\n          ));\r\n        }\r\n      }\r\n    });\r\n    return encryptedText.join(\"\");\r\n  };\r\n\r\n  // Check if user input is valid\r\n  checkValidity = (value) => {\r\n    // Only accept string, special characters not included, and no consecutive spaces\r\n    const pattern = /^[a-zA-Z](?!.* {2})[a-zA-Z ]*$/;\r\n\r\n    const isValid = pattern.test(value);\r\n\r\n    return isValid;\r\n  };\r\n\r\n  // Handles the input change and updating it to state\r\n  inputChangedHandler = (event) => {\r\n    const updatedText = { ...this.state.text, value: event.target.value };\r\n    this.setState({ text: updatedText });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const updateState = { ...this.state.text };\r\n    this.setState({ text: { value: \"\" } });\r\n\r\n    // Check for user input\r\n    updateState.valid = this.checkValidity(updateState.value);\r\n\r\n    if (updateState.valid) {\r\n      updateState.randKey = this.generateKey();\r\n\r\n      if (updateState.randKey === -1) {\r\n        // When no more number is available\r\n        this.props.onNoMoreNumber();\r\n        return -1;\r\n      }\r\n\r\n      // Store the number at store only if valid\r\n      this.props.storeRandomKey(updateState.randKey);\r\n\r\n      // Encrypt the text\r\n      updateState.encText = this.encryptHandler(\r\n        updateState.value,\r\n        updateState.randKey\r\n      );\r\n\r\n      // Store the result at store\r\n      this.props.onEncryptText(\r\n        updateState.value,\r\n        updateState.encText,\r\n        updateState.randKey\r\n      );\r\n    } else {\r\n      // When the string is uncorrect\r\n      this.props.onStringNotValid();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let error = null;\r\n    // If the user enter incorrect input, show error message\r\n    if (this.props.showError) {\r\n      error = (\r\n        <p>\r\n          Insert string only, special characters or multiple spaces not allowed\r\n        </p>\r\n      );\r\n    } else if (this.props.noMoreNumber) {\r\n      // If there is no more number available, show this error and disable the input and button\r\n      error = <p>Sorry! No more number is available 😓</p>;\r\n    }\r\n    return (\r\n      <div className={classes.Form}>\r\n        {error}\r\n        <form onSubmit={this.submitHandler}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter text here...\"\r\n            onChange={this.inputChangedHandler}\r\n            disabled={this.props.noMoreNumber}\r\n            value={this.state.text.value}\r\n          />\r\n          <button disabled={this.props.noMoreNumber}>\r\n            <i className=\"fas fa-chevron-right\"></i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Get states from store\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    keyArr: state.keyArr,\r\n    showError: state.showError,\r\n    noMoreNumber: state.noMoreNumber,\r\n  };\r\n};\r\n\r\n// Functions to inform store to update states\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onEncryptText: (originalText, encryptedText, randKey) =>\r\n      dispatch({\r\n        type: actions.ENCRYPT_TEXT,\r\n        oriText: originalText,\r\n        encText: encryptedText,\r\n        randKey: randKey,\r\n      }),\r\n    storeRandomKey: (randKey) =>\r\n      dispatch({ type: actions.STORE_RANDOM_KEY, randKey: randKey }),\r\n    onStringNotValid: () => dispatch({ type: actions.STRING_NOT_VALID }),\r\n    onNoMoreNumber: () => dispatch({ type: actions.NO_MORE_NUMBER }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React, { Component } from \"react\";\r\n\r\n// Importing style\r\nimport classes from \"./Result.module.css\";\r\n\r\n// Import redux\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    let showResult = null;\r\n    // If the user entered an invalid input or if there is no more number available, do not show anything\r\n    if (this.props.showResult) {\r\n      showResult = (\r\n        <div className={classes.Result}>\r\n          <p>\r\n            Generated key: <span>{this.props.randKey}</span>\r\n          </p>\r\n          <p>\r\n            Original text: <span>{this.props.oriText}</span>\r\n          </p>\r\n          <p>\r\n            Encrypted text: <span>{this.props.encText}</span>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return showResult;\r\n  }\r\n}\r\n\r\n// Get the state from the store\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    randKey: state.randKey,\r\n    oriText: state.text,\r\n    encText: state.encText,\r\n    showResult: state.isValid,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Result);\r\n","// Importing components\nimport Introduction from \"./components/Introduction\";\nimport Form from \"./containers/Form/Form\";\nimport Result from \"./containers/Result/Result\";\n\n// Importing style\nimport classes from \"./App.module.css\";\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Introduction />\n      <Form />\n      <Result />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actions\";\r\n\r\nconst initialState = {\r\n  keyArr: [],\r\n  text: \"\",\r\n  randKey: null,\r\n  encText: \"\",\r\n  isValid: false,\r\n  showError: false,\r\n  noMoreNumber: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ENCRYPT_TEXT:\r\n      return {\r\n        ...state,\r\n        text: action.oriText,\r\n        encText: action.encText,\r\n        randKey: action.randKey,\r\n        isValid: true,\r\n        showError: false,\r\n        noMoreNumber: false,\r\n      };\r\n\r\n    case actionTypes.STRING_NOT_VALID:\r\n      return {\r\n        ...state,\r\n        isValid: false,\r\n        showError: true,\r\n        noMoreNumber: false,\r\n      };\r\n\r\n    case actionTypes.STORE_RANDOM_KEY:\r\n      return {\r\n        ...state,\r\n        keyArr: state.keyArr.concat(action.randKey),\r\n      };\r\n\r\n    case actionTypes.NO_MORE_NUMBER:\r\n      return {\r\n        ...state,\r\n        isValid: false,\r\n        showError: false,\r\n        noMoreNumber: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// Import redux\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\n// Import reducers\nimport reducer from \"./store/reducers\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}